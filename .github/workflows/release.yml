name: Release Pillarbox

on:
  push:
    # Pattern matched against refs/tags
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+-[0-9a-zA-Z]+'

jobs:
  check-pre-release:
    name: Check pre-release
    runs-on: ubuntu-latest
    env:
      VERSION_NAME: ${{ github.ref_name }}
    outputs:
      prerelease: ${{ steps.check-tag.outputs.prerelease }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Check if pre-release tag
        id: check-tag
        run: |
          if [[ "${GITHUB_REF_NAME}" =~ ^[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2}-[0-9a-zA-Z]+$ ]]; then
              echo "prerelease=true" >> $GITHUB_OUTPUT
          fi
      - name: Print version information
        run: |
          echo "Tag: ${GITHUB_REF_NAME}"
          echo "Version name: ${VERSION_NAME}"
          echo "Pre-release: ${{ steps.check-tag.outputs.prerelease }}"

  publish-packages:
    name: Publish packages
    runs-on: ubuntu-latest
    env:
      USERNAME: ${{ github.actor }}
      GITHUB_TOKEN: ${{ github.token }}
      VERSION_NAME: ${{ github.ref_name }}
      SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
      SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Java
        uses: actions/setup-java@v5
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-encryption-key: ${{ secrets.GRADLE_CACHE_ENCRYPTION_KEY }}
          cache-read-only: true
      - name: Publish to GitHub Packages
        run: ./gradlew publish

  upload-to-firebase:
    name: Upload to Firebase App Distribution
    runs-on: ubuntu-latest
    env:
      DEMO_KEY_PASSWORD: ${{ secrets.DEMO_KEY_PASSWORD }}
      USERNAME: ${{ github.actor }}
      GITHUB_TOKEN: ${{ github.token }}
      VERSION_NAME: ${{ github.ref_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Java
        uses: actions/setup-java@v5
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-encryption-key: ${{ secrets.GRADLE_CACHE_ENCRYPTION_KEY }}
          cache-read-only: true
      - name: Build with Gradle
        run: ./gradlew assembleProdRelease
      - name: Upload Demo to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.RELEASE_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_CREDENTIAL_FILE_CONTENT }}
          groups: ${{ secrets.RELEASE_GROUPS }}
          file: pillarbox-demo/build/outputs/apk/prod/release/pillarbox-demo-prod-release.apk
      - name: Upload Demo TV to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.RELEASE_TV_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_CREDENTIAL_FILE_CONTENT }}
          groups: ${{ secrets.RELEASE_GROUPS }}
          file: pillarbox-demo-tv/build/outputs/apk/prod/release/pillarbox-demo-tv-prod-release.apk

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: check-pre-release
    env:
      USERNAME: ${{ github.actor }}
      GITHUB_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Create Github release
        uses: ncipollo/release-action@v1
        with:
          draft: true
          prerelease: ${{ needs.check-pre-release.outputs.prerelease == 'true' }}
          skipIfReleaseExists: true
          generateReleaseNotes: true

  publish-documentation:
    name: Publish Documentation
    runs-on: ubuntu-latest
    needs: check-pre-release
    if: ${{ needs.check-pre-release.outputs.prerelease != 'true' }}
    env:
      USERNAME: ${{ github.actor }}
      GITHUB_TOKEN: ${{ github.token }}
      VERSION_NAME: ${{ github.ref_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Java
        uses: actions/setup-java@v5
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-encryption-key: ${{ secrets.GRADLE_CACHE_ENCRYPTION_KEY }}
          cache-read-only: true
      - name: Build documentation
        run: ./gradlew :dokkaGenerate
      - name: Publish documentation
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: build/dokka/html
          single-commit: true
          target-folder: api

  rollback:
    name: Rollback
    if: ${{ failure() }}
    # We wait for 'upload-to-firebase' and 'publish-documentation' even if there's nothing to rollback there.
    # This allows us to rollback the other steps, and retry the release later when everything is fixed.
    needs: [ publish-packages, upload-to-firebase, create-github-release, publish-documentation ]
    runs-on: ubuntu-latest
    env:
      USERNAME: ${{ github.actor }}
      GITHUB_TOKEN: ${{ github.token }}
      REPO_OWNER: ${{ github.repository_owner }}
      VERSION_NAME: ${{ github.ref_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Delete tag
        run: git push origin --delete ${{ env.VERSION_NAME }} || true
      - name: Delete GitHub Release
        run: gh release delete ${{ env.VERSION_NAME }} -y || true
      - name: Delete 'pillarbox-analytics' from GitHub Packages
        run: ./github/workflows/actions/delete_package.sh ${{ env.REPO_OWNER }} "ch.srgssr.pillarbox.pillarbox-analytics" ${{ env.VERSION_NAME }} || true
      - name: Delete 'pillarbox-cast' from GitHub Packages
        run: ./github/workflows/actions/delete_package.sh ${{ env.REPO_OWNER }} "ch.srgssr.pillarbox.pillarbox-cast" ${{ env.VERSION_NAME }} || true
      - name: Delete 'pillarbox-core-business' from GitHub Packages
        run: ./github/workflows/actions/delete_package.sh ${{ env.REPO_OWNER }} "ch.srgssr.pillarbox.pillarbox-core-business" ${{ env.VERSION_NAME }} || true
      - name: Delete 'pillarbox-core-business-cast' from GitHub Packages
        run: ./github/workflows/actions/delete_package.sh ${{ env.REPO_OWNER }} "ch.srgssr.pillarbox.pillarbox-core-business-cast" ${{ env.VERSION_NAME }} || true
      - name: Delete 'pillarbox-player' from GitHub Packages
        run: ./github/workflows/actions/delete_package.sh ${{ env.REPO_OWNER }} "ch.srgssr.pillarbox.pillarbox-player" ${{ env.VERSION_NAME }} || true
      - name: Delete 'pillarbox-ui' from GitHub Packages
        run: ./github/workflows/actions/delete_package.sh ${{ env.REPO_OWNER }} "ch.srgssr.pillarbox.pillarbox-ui" ${{ env.VERSION_NAME }} || true
